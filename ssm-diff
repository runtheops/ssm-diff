#!/usr/bin/env python
from __future__ import print_function

import argparse
import os

from states import *


def configure_endpoints(args):
    # configure() returns a DiffBase class (whose constructor may be wrapped in `partial` to pre-configure it)
    diff_class = DiffBase.get_plugin(args.engine).configure(args)
    return storage.ParameterStore(args.profile, diff_class, paths=args.path), storage.YAMLFile(args.filename, paths=args.path)


def init(args):
    """Create a local YAML file from the SSM Parameter Store (per configs in args)"""
    remote, local = configure_endpoints(args)
    local.save(remote.clone())


def pull(args):
    """Update local YAML file with changes in the SSM Parameter Store (per configs in args)"""
    remote, local = configure_endpoints(args)
    local.save(remote.pull(local.get()))


def apply(args):
    """Apply local changes to the SSM Parameter Store"""
    remote, local = configure_endpoints(args)
    print("\nApplying changes...")
    try:
        remote.push(local.get())
    except Exception as e:
        print("Failed to apply changes to remote:", e)
    print("Done.")


def plan(args):
    """Print a representation of the changes that would be applied to SSM Parameter Store if applied (per config in args)"""
    remote, local = configure_endpoints(args)
    diff = remote.dry_run(local.get())

    if diff.differ:
        print(DiffBase.describe_diff(diff.plan))
    else:
        print("Remote state is up to date.")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', help='local state yml file', action='store', dest='filename', default='parameters.yml')
    parser.add_argument('--path', '-p', action='append', help='filter SSM path')
    parser.add_argument('--engine', '-e', help='diff engine to use when interacting with SSM', action='store', dest='engine', default='DiffResolver')
    parser.add_argument('--profile', help='AWS profile name', action='store', dest='profile')
    subparsers = parser.add_subparsers(dest='func', help='commands')
    subparsers.required = True

    parser_plan = subparsers.add_parser('plan', help='display changes between local and remote states')
    parser_plan.set_defaults(func=plan)

    parser_init = subparsers.add_parser('init', help='create or overwrite local state snapshot')
    parser_init.set_defaults(func=init)

    parser_pull = subparsers.add_parser('pull', help='pull updates from remote state')
    parser_pull.set_defaults(func=pull)
    parser_pull.add_argument('--force', help='overwrite local changes', action='store_true', dest='force')

    parser_apply = subparsers.add_parser('apply', help='apply diff to the remote state')
    parser_apply.set_defaults(func=apply)

    args = parser.parse_args()
    args.path = args.path if args.path else ['/']

    if args.filename == 'parameters.yml':
        if not args.profile:
            if 'AWS_PROFILE' in os.environ:
                args.filename = os.environ['AWS_PROFILE'] + '.yml'
        else:
            args.filename = args.profile + '.yml'
    args.func(args)
